"use strict";(self.webpackChunknotes_template=self.webpackChunknotes_template||[]).push([[1641],{2878:a=>{a.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Language","href":"/language-automaton-and-compiler/docs/language","docId":"language","unlisted":false},{"type":"link","label":"Grammar and Language Hierarchy","href":"/language-automaton-and-compiler/docs/grammar-and-language-hierarchy","docId":"grammar-and-language-hierarchy","unlisted":false},{"type":"category","label":"Regular Language","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Deterministic Finite Automaton","href":"/language-automaton-and-compiler/docs/regular-language/dfa","docId":"regular-language/dfa","unlisted":false},{"type":"link","label":"Non-Deterministic Finite Automaton","href":"/language-automaton-and-compiler/docs/regular-language/nfa","docId":"regular-language/nfa","unlisted":false},{"type":"link","label":"Non-Deterministic Finite Automaton With Empty Transitions","href":"/language-automaton-and-compiler/docs/regular-language/epsilon-nfa","docId":"regular-language/epsilon-nfa","unlisted":false},{"type":"link","label":"Regular Expression","href":"/language-automaton-and-compiler/docs/regular-language/regular-expression","docId":"regular-language/regular-expression","unlisted":false},{"type":"link","label":"Left Linear Grammar","href":"/language-automaton-and-compiler/docs/regular-language/left-linear-grammar","docId":"regular-language/left-linear-grammar","unlisted":false},{"type":"link","label":"Pumping Lemma of Regular Languages","href":"/language-automaton-and-compiler/docs/regular-language/pumping-lemma","docId":"regular-language/pumping-lemma","unlisted":false}],"href":"/language-automaton-and-compiler/docs/category/regular-language"},{"type":"category","label":"Context Free Language","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Context Free Grammar","href":"/language-automaton-and-compiler/docs/context-free-language/context-free-grammar","docId":"context-free-language/context-free-grammar","unlisted":false},{"type":"link","label":"LL(1) Grammar","href":"/language-automaton-and-compiler/docs/context-free-language/left-starting-leftmost-one-grammar","docId":"context-free-language/left-starting-leftmost-one-grammar","unlisted":false},{"type":"link","label":"Push-Down Automaton","href":"/language-automaton-and-compiler/docs/context-free-language/push-down-automaton","docId":"context-free-language/push-down-automaton","unlisted":false}],"href":"/language-automaton-and-compiler/docs/category/context-free-language"}]},"docs":{"context-free-language/context-free-grammar":{"id":"context-free-language/context-free-grammar","title":"Context Free Grammar","description":"Context free grammar allows rules in the form of,","sidebar":"tutorialSidebar"},"context-free-language/left-starting-leftmost-one-grammar":{"id":"context-free-language/left-starting-leftmost-one-grammar","title":"LL(1) Grammar","description":"Previously, we defined an unambiguous grammar under leftmost derivation as $LL(1)$, the left starting, leftmost derivation grammar with one look ahead. This part, we will focus on how we can test wether a CFG is $LL(1)$.","sidebar":"tutorialSidebar"},"context-free-language/push-down-automaton":{"id":"context-free-language/push-down-automaton","title":"Push-Down Automaton","description":"Push-Down Automaton (PDA) is an automaton that can test a context-free language. Just like how NFA can test a regular language.","sidebar":"tutorialSidebar"},"grammar-and-language-hierarchy":{"id":"grammar-and-language-hierarchy","title":"Grammar and Language Hierarchy","description":"Grammar","sidebar":"tutorialSidebar"},"language":{"id":"language","title":"Language","description":"Symbol","sidebar":"tutorialSidebar"},"regular-language/dfa":{"id":"regular-language/dfa","title":"Deterministic Finite Automaton","description":"Deterministic Finite automaton (DFA) is a machine that can recognize a regular language based on its grammar.","sidebar":"tutorialSidebar"},"regular-language/epsilon-nfa":{"id":"regular-language/epsilon-nfa","title":"Non-Deterministic Finite Automaton With Empty Transitions","description":"We have nullable regular languages, and so we have nullable NFA, that is, NFA with empty transitions, also called e-NFA ($\\\\epsilon$-NFA).","sidebar":"tutorialSidebar"},"regular-language/left-linear-grammar":{"id":"regular-language/left-linear-grammar","title":"Left Linear Grammar","description":"This is a bit of a detour. Previously, we defined regular grammar as,","sidebar":"tutorialSidebar"},"regular-language/nfa":{"id":"regular-language/nfa","title":"Non-Deterministic Finite Automaton","description":"Non-Deterministic Finite automaton (NFA) is an extension to the DFA that is simpler to design. It can be converted into a DFA and thus, it also accepts a regular language.","sidebar":"tutorialSidebar"},"regular-language/pumping-lemma":{"id":"regular-language/pumping-lemma","title":"Pumping Lemma of Regular Languages","description":"The pumping lemma for regular languages is a lemma that describes an essential property of all regular languages. Informally, it says that all sufficiently long strings in a regular language may be pumped\u2014that is, have a middle section of the string repeated an arbitrary number of times\u2014to produce a new string that is also part of the language.","sidebar":"tutorialSidebar"},"regular-language/regular-expression":{"id":"regular-language/regular-expression","title":"Regular Expression","description":"Regular expression is a simpler way to describe a regular language.","sidebar":"tutorialSidebar"}}}}')}}]);